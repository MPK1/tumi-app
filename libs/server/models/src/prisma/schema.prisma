// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../lib/client"
  previewFeatures = ["interactiveTransactions"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
  //  output   = "../lib/nexus"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./dbml"
}

enum Role {
  USER
  ADMIN
}

enum MembershipStatus {
  NONE
  TRIAL
  FULL
  SPONSOR
  ALUMNI
}

enum PublicationState {
  DRAFT
  APPROVAL
  ORGANIZERS
  PUBLIC
}

enum SubmissionItemType {
  FILE
  NUMBER
  TEXT
  DATE
  RATING
}

enum SubmissionTime {
  REGISTRATION
  BEFORE
  DURING
  AFTER
}

enum RegistrationType {
  ORGANIZER
  PARTICIPANT
  CALENDAR
}

enum RegistrationMode {
  STRIPE
  ONLINE
  EXTERNAL
}

enum LogSeverity {
  SILLY
  DEBUG
  INFO
  WARNING
  ERROR
}

/// One Tenant of the app, most likely an ESN section
model Tenant {
  id                    String                 @id @default(uuid()) @db.Uuid
  createdAt             DateTime               @default(now())
  users                 UsersOfTenants[]
  name                  String
  shortName             String                 @unique
  // Info pages
  privacyPolicyPage     String                 @default("")
  imprintPage           String                 @default("")
  aboutPage             String                 @default("")
  faqPage               String?
  // Relations
  eventTemplates        EventTemplate[]
  organizers            EventOrganizer[]
  refundedRegistrations RefundedRegistration[]
  products              Product[]
}

/// One User of the app
model User {
  id                 String              @id @default(uuid()) @db.Uuid
  createdAt          DateTime            @default(now())
  /// Id from auth0 for this user
  authId             String              @unique
  // User attributes
  firstName          String
  lastName           String
  email              String
  email_verified     Boolean
  phone              String?
  paypal             String?
  iban               String?
  picture            String
  birthdate          DateTime
  // Calendar fucntionality
  calendarToken      String              @unique @default(uuid()) @db.Uuid
  // User relations
  tenants            UsersOfTenants[]
  eventSubmissions   EventSubmission[]
  eventRegistrations EventRegistration[]
  receipts           Receipt[]
  createdEvents      TumiEvent[]
  purchases          ProductPurchase[]
}

model StripeUserData {
  id                     String         @id @default(uuid()) @db.Uuid
  createdAt              DateTime       @default(now())
  userOfTenant           UsersOfTenants @relation(fields: [usersOfTenantsUserId, usersOfTenantsTenantId], references: [userId, tenantId])
  usersOfTenantsUserId   String         @db.Uuid
  usersOfTenantsTenantId String         @db.Uuid
  customerId             String
  paymentMethodId        String?

  @@unique([usersOfTenantsUserId, usersOfTenantsTenantId])
}

model RefundedRegistration {
  id             String   @id @default(uuid()) @db.Uuid
  createdAt      DateTime @default(now())
  eventId        String   @db.Uuid
  userId         String   @db.Uuid
  registrationId String   @db.Uuid
  chargeId       String
  refundId       String
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
  tenantId       String   @db.Uuid
}

model UsersOfTenants {
  createdAt  DateTime         @default(now())
  user       User             @relation(fields: [userId], references: [id])
  userId     String           @db.Uuid
  tenant     Tenant           @relation(fields: [tenantId], references: [id])
  tenantId   String           @db.Uuid
  role       Role             @default(USER)
  status     MembershipStatus @default(NONE)
  stripeData StripeUserData?

  @@id([userId, tenantId])
}

model EventOrganizer {
  id        String      @id @default(uuid()) @db.Uuid
  createdAt DateTime    @default(now())
  tenant    Tenant      @relation(fields: [tenantId], references: [id])
  tenantId  String      @db.Uuid
  name      String
  text      String
  link      String?
  events    TumiEvent[]
}

/// Template that holds all information for an event that is needed to run it
model EventTemplate {
  id              String                 @id @default(uuid()) @db.Uuid
  createdAt       DateTime               @default(now())
  title           String
  icon            String
  description     String
  comment         String
  location        String
  locationId      String
  duration        Decimal
  participantText String
  participantMail String
  organizerText   String
  finances        Json
  eventInstances  TumiEvent[]
  tenant          Tenant                 @relation(fields: [tenantId], references: [id])
  tenantId        String                 @db.Uuid
  category        EventTemplateCategory? @relation(fields: [categoryId], references: [id])
  categoryId      String?                @db.Uuid
}

/// Category to keep an overview of event templates
model EventTemplateCategory {
  id        String          @id @default(uuid()) @db.Uuid
  createdAt DateTime        @default(now())
  name      String
  templates EventTemplate[]
}

/// Actual instande of an TumiEventbased on a template
model TumiEvent {
  id                String                @id @default(uuid()) @db.Uuid
  createdAt         DateTime              @default(now())
  title             String
  icon              String
  start             DateTime
  end               DateTime
  description       String
  location          String
  locationId        String
  participantText   String
  participantMail   String
  organizerText     String
  participantLimit  Int                   @default(0)
  organizerLimit    Int                   @default(0)
  price             Decimal?
  registrationLink  String?
  registrationMode  RegistrationMode
  publicationState  PublicationState      @default(DRAFT)
  participantSignup MembershipStatus[]
  organizerSignup   MembershipStatus[]
  submissionItems   EventSubmissionItem[]
  registrations     EventRegistration[]
  costItems         CostItem[]
  photoShare        PhotoShare?
  organizer         EventOrganizer        @relation(fields: [eventOrganizerId], references: [id])
  eventOrganizerId  String                @db.Uuid
  createdBy         User                  @relation(fields: [creatorId], references: [id])
  creatorId         String                @db.Uuid
  eventTemplate     EventTemplate         @relation(fields: [eventTemplateId], references: [id])
  eventTemplateId   String                @db.Uuid
}

model Product {
  id           String             @id @default(uuid()) @db.Uuid
  createdAt    DateTime           @default(now())
  title        String
  icon         String
  description  String
  availability MembershipStatus[]
  prices       ProductPrice[]
  tenant       Tenant             @relation(fields: [tenantId], references: [id])
  tenantId     String             @db.Uuid
  purchases    ProductPurchase[]
}

model ProductPrice {
  id           String             @id @default(uuid()) @db.Uuid
  createdAt    DateTime           @default(now())
  amount       Decimal
  availability MembershipStatus[]
  product      Product            @relation(fields: [productId], references: [id])
  productId    String             @db.Uuid
  purchases    ProductPurchase[]
}

model ProductPurchase {
  id             String       @id @default(uuid()) @db.Uuid
  createdAt      DateTime     @default(now())
  product        Product      @relation(fields: [productId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  price          ProductPrice @relation(fields: [productPriceId], references: [id])
  productId      String       @db.Uuid
  userId         String       @db.Uuid
  productPriceId String       @db.Uuid
}

model CostItem {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  event     TumiEvent @relation(fields: [eventId], references: [id])
  eventId   String    @db.Uuid
  name      String
  ammount   Decimal
  receipts  Receipt[]
}

model Receipt {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.Uuid
  costItem      CostItem @relation(fields: [costItemId], references: [id])
  costItemId    String   @db.Uuid
  covered       Boolean  @default(false)
  amount        Int
  date          DateTime
  amountCovered Int
}

model PhotoShare {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  event     TumiEvent @relation(fields: [eventId], references: [id])
  eventId   String    @db.Uuid
}

model EventRegistration {
  id              String                       @id @default(uuid()) @db.Uuid
  createdAt       DateTime                     @default(now())
  type            RegistrationType             @default(PARTICIPANT)
  user            User                         @relation(fields: [userId], references: [id])
  userId          String                       @db.Uuid
  event           TumiEvent                    @relation(fields: [eventId], references: [id])
  eventId         String                       @db.Uuid
  checkInTime     DateTime?
  paymentIntentId String?
  chargeId        String?
  paymentStatus   String?
  stripeFee       Int?
  amountPaid      Int?
  netPaid         Int?
  moveOrders      EventRegistrationMoveOrder[]

  @@unique([userId, eventId])
}

model EventRegistrationMoveOrder {
  id                  String            @id @default(uuid()) @db.Uuid
  createdAt           DateTime          @default(now())
  createdBy           String            @db.Uuid
  failed              Boolean           @default(false)
  usedBy              String?           @db.Uuid
  usedAt              DateTime?
  registration        EventRegistration @relation(fields: [eventRegistrationId], references: [id], onDelete: Cascade)
  eventRegistrationId String            @db.Uuid
}

model EventSubmissionItem {
  id             String            @id @default(uuid()) @db.Uuid
  createdAt      DateTime          @default(now())
  event          TumiEvent         @relation(fields: [eventId], references: [id])
  eventId        String            @db.Uuid
  required       Boolean
  submissionTime SubmissionTime
  submissions    EventSubmission[]
}

model EventSubmission {
  id               String              @id @default(uuid()) @db.Uuid
  createdAt        DateTime            @default(now())
  user             User                @relation(fields: [userId], references: [id])
  userId           String              @db.Uuid
  submissionItem   EventSubmissionItem @relation(fields: [submissionItemId], references: [id])
  submissionItemId String              @db.Uuid
}

model ActivityLog {
  id           String      @id @default(uuid()) @db.Uuid
  createdAt    DateTime    @default(now())
  message      String
  data         Json?
  oldData      Json?
  involvedUser String?     @db.Uuid
  severity     LogSeverity
}
