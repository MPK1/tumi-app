// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../lib/client"
  previewFeatures = ["interactiveTransactions", "fullTextSearch"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
  output   = "../../../graphql/src/lib/nexus"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./dbml"
}

enum Role {
  USER
  ADMIN
}

enum MembershipStatus {
  NONE
  TRIAL
  FULL
  SPONSOR
  ALUMNI
}

enum PublicationState {
  DRAFT
  APPROVAL
  ORGANIZERS
  PUBLIC
}

enum SubmissionItemType {
  FILE
  NUMBER
  TEXT
  LONGTEXT
  DATE
  RATING
  BOOLEAN
  SELECT
}

enum SubmissionTime {
  REGISTRATION
  BEFORE
  DURING
  AFTER
}

enum RegistrationType {
  ORGANIZER
  PARTICIPANT
  CALENDAR
}

enum RegistrationStatus {
  PENDING
  SUCCESSFUL
  CANCELLED
}

enum PurchaseStatus {
  PENDING
  PAID
  SENT
  CANCELLED
}

enum RegistrationMode {
  STRIPE
  ONLINE
  EXTERNAL
}

enum LogSeverity {
  SILLY
  DEBUG
  INFO
  WARNING
  ERROR
}

/// One Tenant of the app, most likely an ESN section
model Tenant {
  id                      String                  @id @default(uuid()) @db.Uuid
  createdAt               DateTime                @default(now())
  users                   UsersOfTenants[]
  name                    String
  shortName               String                  @unique
  // Info pages
  privacyPolicyPage       String                  @default("")
  imprintPage             String                  @default("")
  aboutPage               String                  @default("")
  faqPage                 String?
  tacPage                 String?
  // Relations
  eventTemplates          EventTemplate[]
  organizers              EventOrganizer[]
  refundedRegistrations   RefundedRegistration[]
  products                Product[]
  eventTemplateCategories EventTemplateCategory[]
  Transaction             Transaction[]
}

/// One User of the app
model User {
  id                 String              @id @default(uuid()) @db.Uuid
  createdAt          DateTime            @default(now())
  /// Id from auth0 for this user
  authId             String              @unique
  // User attributes
  birthdate          DateTime
  email              String
  email_verified     Boolean
  esnCardOverride    Boolean             @default(false)
  firstName          String
  iban               String?
  lastName           String
  paypal             String?
  phone              String?
  picture            String
  university         String?
  // Calendar fucntionality
  calendarToken      String              @unique @default(uuid()) @db.Uuid
  // User relations
  createdEvents      TumiEvent[]
  eventRegistrations EventRegistration[]
  payments           StripePayment[]
  photos             PhotoShare[]
  productImages      ProductImage[]
  purchases          Purchase[]
  receipts           Receipt[]
  tenants            UsersOfTenants[]
  Transaction        Transaction[]
}

model StripeUserData {
  id                     String         @id @default(uuid()) @db.Uuid
  createdAt              DateTime       @default(now())
  customerId             String
  paymentMethodId        String?
  userOfTenant           UsersOfTenants @relation(fields: [usersOfTenantsUserId, usersOfTenantsTenantId], references: [userId, tenantId])
  usersOfTenantsTenantId String         @db.Uuid
  usersOfTenantsUserId   String         @db.Uuid

  @@unique([usersOfTenantsUserId, usersOfTenantsTenantId])
}

model ShoppingCart {
  id                     String         @id @default(uuid()) @db.Uuid
  createdAt              DateTime       @default(now())
  items                  LineItem[]
  userOfTenant           UsersOfTenants @relation(fields: [usersOfTenantsUserId, usersOfTenantsTenantId], references: [userId, tenantId])
  usersOfTenantsTenantId String         @db.Uuid
  usersOfTenantsUserId   String         @db.Uuid

  @@unique([usersOfTenantsUserId, usersOfTenantsTenantId])
}

model StripePayment {
  id                    String                 @id @default(uuid()) @db.Uuid
  createdAt             DateTime               @default(now())
  amount                Decimal
  checkoutSession       String                 @unique
  eventRegistration     EventRegistration?
  eventRegistrationCode EventRegistrationCode?
  events                Json /// Array of events with their timestamps
  feeAmount             Decimal?
  netAmount             Decimal?
  paymentIntent         String                 @unique
  paymentMethod         String?
  paymentMethodType     String?
  purchase              Purchase?
  refundedAmount        Decimal?
  shipping              Json?
  status                String
  user                  User                   @relation(fields: [userId], references: [id])
  userId                String                 @db.Uuid
  Transaction           Transaction[]
}

model Transaction {
  id              String        @id @default(uuid()) @db.Uuid
  createdAt       DateTime      @default(now())
  payment         StripePayment @relation(fields: [stripePaymentId], references: [id])
  subject         String
  user            User?         @relation(fields: [userId], references: [id])
  event           TumiEvent?    @relation(fields: [tumiEventId], references: [id])
  tenant          Tenant?       @relation(fields: [tenantId], references: [id])
  isMembershipFee Boolean
  stripePaymentId String        @db.Uuid
  userId          String?       @db.Uuid
  tumiEventId     String?       @db.Uuid
  tenantId        String?       @db.Uuid
}

/// To be removed soon
model RefundedRegistration {
  id             String   @id @default(uuid()) @db.Uuid
  createdAt      DateTime @default(now())
  chargeId       String
  eventId        String   @db.Uuid
  refundId       String
  registrationId String   @db.Uuid
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
  tenantId       String   @db.Uuid
  userId         String   @db.Uuid
}

model UsersOfTenants {
  createdAt  DateTime         @default(now())
  cart       ShoppingCart?
  role       Role             @default(USER)
  status     MembershipStatus @default(NONE)
  stripeData StripeUserData?
  tenant     Tenant           @relation(fields: [tenantId], references: [id])
  tenantId   String           @db.Uuid
  user       User             @relation(fields: [userId], references: [id])
  userId     String           @db.Uuid

  @@id([userId, tenantId])
}

model EventOrganizer {
  id        String      @id @default(uuid()) @db.Uuid
  createdAt DateTime    @default(now())
  tenant    Tenant      @relation(fields: [tenantId], references: [id])
  tenantId  String      @db.Uuid
  name      String
  text      String
  link      String?
  events    TumiEvent[]
}

/// Template that holds all information for an event that is needed to run it
model EventTemplate {
  id              String                 @id @default(uuid()) @db.Uuid
  createdAt       DateTime               @default(now())
  category        EventTemplateCategory? @relation(fields: [categoryId], references: [id])
  categoryId      String?                @db.Uuid
  comment         String
  coordinates     Json?
  description     String
  duration        Decimal
  eventInstances  TumiEvent[]
  finances        Json
  icon            String
  location        String
  organizerText   String
  participantText String
  tenant          Tenant                 @relation(fields: [tenantId], references: [id])
  tenantId        String                 @db.Uuid
  title           String
}

/// Category to keep an overview of event templates
model EventTemplateCategory {
  id        String          @id @default(uuid()) @db.Uuid
  createdAt DateTime        @default(now())
  name      String
  icon      String
  templates EventTemplate[]
  tenant    Tenant          @relation(fields: [tenantId], references: [id])
  tenantId  String          @db.Uuid
}

/// Actual instande of an TumiEventbased on a template
model TumiEvent {
  id                     String                  @id @default(uuid()) @db.Uuid
  createdAt              DateTime                @default(now())
  coordinates            Json?
  costItems              CostItem[]
  createdBy              User                    @relation(fields: [creatorId], references: [id])
  creatorId              String                  @db.Uuid
  description            String
  end                    DateTime
  eventOrganizerId       String                  @db.Uuid
  eventRegistrationCodes EventRegistrationCode[]
  eventTemplate          EventTemplate           @relation(fields: [eventTemplateId], references: [id])
  eventTemplateId        String                  @db.Uuid
  icon                   String
  location               String
  organizer              EventOrganizer          @relation(fields: [eventOrganizerId], references: [id])
  organizerLimit         Int                     @default(0)
  organizerSignup        MembershipStatus[]
  organizerText          String
  participantLimit       Int                     @default(0)
  participantSignup      MembershipStatus[]
  participantText        String
  photoShares            PhotoShare[]
  prices                 Json?
  publicationState       PublicationState        @default(DRAFT)
  registrationLink       String?
  registrationMode       RegistrationMode
  registrationStart      DateTime                @default(now())
  registrations          EventRegistration[]
  start                  DateTime
  submissionItems        EventSubmissionItem[]
  title                  String
  Transaction            Transaction[]
}

model Product {
  id                   String                @id @default(uuid()) @db.Uuid
  createdAt            DateTime              @default(now())
  availability         MembershipStatus[]
  description          String
  images               ProductImage[]
  isESNcard            Boolean               @default(false)
  leadImageId          String?               @db.Uuid
  lineItems            LineItem[]
  needsShippingAddress Boolean               @default(false)
  isActive             Boolean               @default(true)
  prices               Json
  publicationState     PublicationState      @default(DRAFT)
  submissionItems      EventSubmissionItem[]
  tenant               Tenant                @relation(fields: [tenantId], references: [id])
  tenantId             String                @db.Uuid
  title                String
}

model ProductImage {
  id           String   @id @default(uuid()) @db.Uuid
  createdAt    DateTime @default(now())
  container    String
  creator      User     @relation(fields: [creatorId], references: [id])
  creatorId    String   @db.Uuid
  originalBlob String
  previewBlob  String?
  type         String
  product      Product  @relation(fields: [productId], references: [id])
  productId    String   @db.Uuid
}

model Purchase {
  id                 String         @id @default(uuid()) @db.Uuid
  createdAt          DateTime       @default(now())
  cancellationReason String?
  items              LineItem[]
  payment            StripePayment  @relation(fields: [paymentId], references: [id])
  status             PurchaseStatus @default(PENDING)
  paymentId          String         @unique @db.Uuid
  user               User           @relation(fields: [userId], references: [id])
  userId             String         @db.Uuid
}

model LineItem {
  id                 String            @id @default(uuid()) @db.Uuid
  createdAt          DateTime          @default(now())
  cancellationReason String?
  cart               ShoppingCart?     @relation(fields: [shoppingCartId], references: [id])
  cost               Decimal
  pickupTime         DateTime?
  product            Product           @relation(fields: [productId], references: [id])
  productId          String            @db.Uuid
  purchase           Purchase?         @relation(fields: [purchaseId], references: [id])
  purchaseId         String?           @db.Uuid
  quantity           Int               @default(1)
  shoppingCartId     String?           @db.Uuid
  submissions        EventSubmission[]
}

model CostItem {
  id              String    @id @default(uuid()) @db.Uuid
  createdAt       DateTime  @default(now())
  actualAmount    Decimal?
  amount          Decimal
  calculationInfo String
  confirmed       Boolean   @default(false)
  details         String?
  event           TumiEvent @relation(fields: [eventId], references: [id])
  eventId         String    @db.Uuid
  moneySent       Boolean   @default(false)
  moneySentTo     String?   @db.Uuid
  name            String
  onInvoice       Boolean
  receipts        Receipt[]
}

model Receipt {
  id         String   @id @default(uuid()) @db.Uuid
  createdAt  DateTime @default(now())
  amount     Decimal
  blob       String
  container  String
  costItem   CostItem @relation(fields: [costItemId], references: [id])
  costItemId String   @db.Uuid
  md5        String?
  preview    String?
  type       String?
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.Uuid
}

model PhotoShare {
  id           String    @id @default(uuid()) @db.Uuid
  createdAt    DateTime  @default(now())
  cols         Int       @default(2)
  container    String
  creator      User      @relation(fields: [creatorId], references: [id])
  creatorId    String    @db.Uuid
  event        TumiEvent @relation(fields: [eventId], references: [id])
  eventId      String    @db.Uuid
  originalBlob String
  previewBlob  String?
  rows         Int       @default(1)
  type         String
}

model EventRegistration {
  id                    String                 @id @default(uuid()) @db.Uuid
  createdAt             DateTime               @default(now())
  cancellationReason    String?
  checkInTime           DateTime?
  event                 TumiEvent              @relation(fields: [eventId], references: [id])
  eventId               String                 @db.Uuid
  manualCheckin         Boolean                @default(false)
  payment               StripePayment?         @relation(fields: [paymentId], references: [id])
  paymentId             String?                @unique @db.Uuid
  status                RegistrationStatus     @default(SUCCESSFUL)
  submissions           EventSubmission[]
  type                  RegistrationType       @default(PARTICIPANT)
  user                  User                   @relation(fields: [userId], references: [id])
  userId                String                 @db.Uuid
  registrationCodeId    String?                @db.Uuid
  eventRegistrationCode EventRegistrationCode? @relation(fields: [registrationCodeId], references: [id])
}

model EventRegistrationCode {
  id                     String              @id @default(uuid()) @db.Uuid
  createdAt              DateTime            @default(now())
  createdById            String              @db.Uuid
  registrationToRemoveId String?             @unique @db.Uuid
  registrationCreatedId  String?             @db.Uuid
  targetEvent            TumiEvent           @relation(fields: [eventId], references: [id])
  isPublic               Boolean             @default(false)
  sepaAllowed            Boolean             @default(false)
  eventId                String              @db.Uuid
  status                 RegistrationStatus  @default(PENDING)
  payment                StripePayment?      @relation(fields: [paymentId], references: [id])
  paymentId              String?             @unique @db.Uuid
  connectedRegistrations EventRegistration[]
}

model EventSubmissionItem {
  id             String             @id @default(uuid()) @db.Uuid
  createdAt      DateTime           @default(now())
  data           Json?
  event          TumiEvent?         @relation(fields: [eventId], references: [id])
  eventId        String?            @db.Uuid
  instruction    String
  name           String
  product        Product?           @relation(fields: [productId], references: [id])
  productId      String?            @db.Uuid
  required       Boolean
  submissionTime SubmissionTime
  submissions    EventSubmission[]
  type           SubmissionItemType
}

model EventSubmission {
  id                  String              @id @default(uuid()) @db.Uuid
  createdAt           DateTime            @default(now())
  data                Json
  eventRegistrationId String?             @db.Uuid
  lineItem            LineItem?           @relation(fields: [lineItemId], references: [id])
  lineItemId          String?             @db.Uuid
  registration        EventRegistration?  @relation(fields: [eventRegistrationId], references: [id], onDelete: Cascade)
  submissionItem      EventSubmissionItem @relation(fields: [submissionItemId], references: [id])
  submissionItemId    String              @db.Uuid
}

model ActivityLog {
  id           String      @id @default(uuid()) @db.Uuid
  createdAt    DateTime    @default(now())
  message      String
  category     String      @default("general")
  data         Json?
  oldData      Json?
  involvedUser String?     @db.Uuid
  severity     LogSeverity
}
