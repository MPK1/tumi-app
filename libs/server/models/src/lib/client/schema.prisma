// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../lib/client"
}

generator nexusPrisma {
  provider = "nexus-prisma"
  //  output   = "../lib/nexus"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./dbml"
}

enum Role {
  USER
  ADMIN
}

enum MembershipStatus {
  NONE
  TRIAL
  FULL
  SPONSOR
  ALUMNI
}

enum PublicationState {
  DRAFT
  APPROVAL
  PUBLIC
}

enum SubmissionItemType {
  FILE
  NUMBER
  TEXT
  DATE
  RATING
}

enum SubmissionTime {
  REGISTRATION
  BEFORE
  DURING
  AFTER
}

enum RegistrationType {
  ORGANIZER
  PARTICIPANT
  CALENDAR
}

enum RegistrationMode {
  STRIPE
  ONLINE
  EXTERNAL
}

/// One Tenant of the app, most likely an ESN section
model Tenant {
  id             String           @id @default(uuid()) @db.Uuid
  createdAt      DateTime         @default(now())
  users          UsersOfTenants[]
  name           String
  shortName      String           @unique
  eventTemplates EventTemplate[]
  organizers     EventOrganizer[]
}

/// One User of the app
model User {
  id                 String              @id @default(uuid()) @db.Uuid
  createdAt          DateTime            @default(now())
  /// Id from auth0 for this user
  authId             String              @unique
  // User attributes
  firstName          String
  lastName           String
  email              String
  birthdate          DateTime
  // User relations
  tenants            UsersOfTenants[]
  eventSubmissions   EventSubmission[]
  eventRegistrations EventRegistration[]
  receipts           Receipt[]
  createdEvents      TumiEvent[]
}

model UsersOfTenants {
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @db.Uuid
  tenant    Tenant           @relation(fields: [tenantId], references: [id])
  tenantId  String           @db.Uuid
  role      Role             @default(USER)
  status    MembershipStatus @default(NONE)

  @@id([userId, tenantId])
}

model EventOrganizer {
  id        String      @id @default(uuid()) @db.Uuid
  createdAt DateTime    @default(now())
  tenant    Tenant      @relation(fields: [tenantId], references: [id])
  tenantId  String      @db.Uuid
  name      String
  text      String
  link      String?
  events    TumiEvent[]
}

/// Template that holds all information for an event that is needed to run it
model EventTemplate {
  id              String      @id @default(uuid()) @db.Uuid
  createdAt       DateTime    @default(now())
  title           String
  icon            String
  description     String
  comment         String
  location        String
  locationId      String
  duration        Decimal
  participantText String
  participantMail String
  organizerText   String
  finances        Json
  eventInstances  TumiEvent[]
  tenant          Tenant      @relation(fields: [tenantId], references: [id])
  tenantId        String      @db.Uuid
}

/// Actual instande of an TumiEventbased on a template
model TumiEvent {
  id                String                @id @default(uuid()) @db.Uuid
  createdAt         DateTime              @default(now())
  title             String
  icon              String
  start             DateTime
  end               DateTime
  description       String
  location          String
  locationId        String
  participantText   String
  participantMail   String
  organizerText     String
  participantLimit  Int
  organizerLimit    Int
  price             Decimal?
  registrationLink  String?
  registrationMode  RegistrationMode
  publicationState  PublicationState      @default(DRAFT)
  participantSignup MembershipStatus[]
  organizerSignup   MembershipStatus[]
  submissionItems   EventSubmissionItem[]
  registrations     EventRegistration[]
  costItems         CostItem[]
  photoShare        PhotoShare?
  organizer         EventOrganizer        @relation(fields: [eventOrganizerId], references: [id])
  eventOrganizerId  String                @db.Uuid
  createdBy         User                  @relation(fields: [creatorId], references: [id])
  creatorId         String                @db.Uuid
  eventTemplate     EventTemplate         @relation(fields: [eventTemplateId], references: [id])
  eventTemplateId   String                @db.Uuid
}

model CostItem {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  event     TumiEvent @relation(fields: [eventId], references: [id])
  eventId   String    @db.Uuid
  name      String
  ammount   Decimal
  receipts  Receipt[]
}

model Receipt {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.Uuid
  costItem      CostItem @relation(fields: [costItemId], references: [id])
  costItemId    String   @db.Uuid
  covered       Boolean  @default(false)
  amount        Int
  date          DateTime
  amountCovered Int
}

model PhotoShare {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  event     TumiEvent @relation(fields: [eventId], references: [id])
  eventId   String    @db.Uuid
}

model EventRegistration {
  id        String           @id @default(uuid()) @db.Uuid
  createdAt DateTime         @default(now())
  type      RegistrationType @default(PARTICIPANT)
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @db.Uuid
  event     TumiEvent        @relation(fields: [eventId], references: [id])
  eventId   String           @db.Uuid

  @@unique([userId, eventId])
}

model EventSubmissionItem {
  id             String            @id @default(uuid()) @db.Uuid
  createdAt      DateTime          @default(now())
  event          TumiEvent         @relation(fields: [eventId], references: [id])
  eventId        String            @db.Uuid
  required       Boolean
  submissionTime SubmissionTime
  submissions    EventSubmission[]
}

model EventSubmission {
  id               String              @id @default(uuid()) @db.Uuid
  createdAt        DateTime            @default(now())
  user             User                @relation(fields: [userId], references: [id])
  userId           String              @db.Uuid
  submissionItem   EventSubmissionItem @relation(fields: [submissionItemId], references: [id])
  submissionItemId String              @db.Uuid
}
