### This file was generated by Nexus Schema
### Do not make changes to this file directly


type ActivityLog {
  createdAt: DateTime!
  data: Json
  id: ID!
  involvedUser: String
  message: String!
  oldData: Json
  severity: LogSeverity!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

type CostItem {
  actualAmount: Decimal
  amount: Decimal!
  calculationInfo: String!
  confirmed: Boolean!
  createdAt: DateTime!
  details: String
  event: TumiEvent!
  eventId: String!
  id: ID!
  moneySent: Boolean!
  moneySentTo: String
  name: String!
  onInvoice: Boolean!
  receipts: [Receipt!]!
  submittedAmount: Decimal!
}

"""Additional inputs to create an event from a template"""
input CreateEventFromTemplateInput {
  discountedPrice: Decimal
  end: DateTime!
  esnDiscount: Boolean!
  organizerId: ID
  organizerLimit: Int!
  participantLimit: Int!
  price: Decimal
  registrationLink: String
  registrationMode: RegistrationMode!
  start: DateTime!
}

"""Input needed to create a new event template"""
input CreateEventTemplateInput {
  comment: String!
  coordinates: Json
  description: String!
  duration: Decimal!
  icon: String!
  location: String!
  organizerText: String!
  participantMail: String!
  participantText: String!
  title: String!
}

input CreateReceiptInput {
  amount: Decimal!
  blob: String!
  container: String!
  md5: String
  type: String
}

input CreateSubmissionItemInput {
  instruction: String!
  name: String!
  required: Boolean!
  submissionTime: SubmissionTime!
  type: SubmissionItemType!
}

"""New user input object"""
input CreateUserInput {
  birthdate: DateTime!
  firstName: String!
  lastName: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

type EventOrganizer {
  createdAt: DateTime!
  events: [TumiEvent!]!
  id: ID!
  link: String
  name: String!
  tenant: Tenant!
  tenantId: String!
  text: String!
}

type EventRegistration {
  amountPaid: Int
  chargeId: String
  checkInTime: DateTime
  createdAt: DateTime!
  didAttend: Boolean!
  event: TumiEvent!
  eventId: String!
  id: ID!
  manualCheckin: Boolean!
  moveOrders: [EventRegistrationMoveOrder!]!
  netPaid: Int
  openMoveOrders: [EventRegistrationMoveOrder!]!
  paymentIntentId: String
  paymentStatus: String
  stripeFee: Int
  submissions: [EventSubmission!]!
  type: RegistrationType!
  user: User!
  userId: String!
}

type EventRegistrationMoveOrder {
  createdAt: DateTime!
  createdBy: String!
  creator: User!
  eventRegistrationId: String!
  id: ID!
  receiver: User
  registration: EventRegistration!
  usedAt: DateTime
  usedBy: String
}

type EventSubmission {
  createdAt: DateTime!
  data: Json!
  eventRegistrationId: String!
  id: ID!
  registration: EventRegistration!
  submissionItem: EventSubmissionItem!
  submissionItemId: String!
}

type EventSubmissionItem {
  createdAt: DateTime!
  event: TumiEvent!
  eventId: String!
  id: ID!
  instruction: String!
  name: String!
  required: Boolean!
  submissionTime: SubmissionTime!
  submissions: [EventSubmission!]!
  type: SubmissionItemType!
}

"""
Template that holds all information for an event that is needed to run it
"""
type EventTemplate {
  comment: String!
  coordinates: Json
  createdAt: DateTime!
  description: String!
  duration: Decimal!
  eventInstances: [TumiEvent!]!
  finances: Json!
  icon: String!
  id: ID!
  location: String!
  organizerText: String!
  participantMail: String!
  participantText: String!
  tenant: Tenant!
  title: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum LogSeverity {
  DEBUG
  ERROR
  INFO
  SILLY
  WARNING
}

enum MembershipStatus {
  ALUMNI
  FULL
  NONE
  SPONSOR
  TRIAL
}

type Mutation {
  """Adds the user with the supplied id to the event"""
  addOrganizerToEvent(eventId: ID!, userId: ID!): TumiEvent
  addReceiptToCostItem(costItemId: ID!, receiptInput: CreateReceiptInput!): CostItem
  blobUploadKey: String!

  """Change the publication state of an event"""
  changeEventPublication(id: ID!, state: PublicationState!): TumiEvent
  checkInUser(id: ID!, manualCheckin: Boolean = false): EventRegistration

  """Creates a new event from a given Template"""
  createEventFromTemplate(createEventFromTemplateInput: CreateEventFromTemplateInput!, templateId: ID!): TumiEvent

  """Create a new event organizer"""
  createEventOrganizer(newOrganizerInput: NewOrganizerInput!): EventOrganizer
  createEventTemplate(eventTemplateInput: CreateEventTemplateInput!): EventTemplate
  createRegistrationMoveOrder(id: ID!): EventRegistration!
  createSubmissionOnEvent(
    data: CreateSubmissionItemInput!

    """ID of the targeted event"""
    id: ID!
  ): TumiEvent!
  deleteCostItem(id: ID!): TumiEvent
  deleteReceipt(costItemId: ID!, receiptId: ID!): CostItem!

  """Delete one template by id"""
  deleteTemplate(id: ID!): EventTemplate
  deregisterFromEvent(id: ID!, userId: ID): TumiEvent
  deregisterUserWithRefund(eventId: ID!, userId: ID): TumiEvent!
  newProduct(input: newProductInput!): Product!
  registerForEvent(eventId: ID!, registrationType: RegistrationType = PARTICIPANT): TumiEvent

  """Add a new user to the database"""
  registerUser(userInput: CreateUserInput): User!
  registerWithStripe(id: ID!, submissions: Json): paymentIntent!

  """Removes the user with the supplied id to the event"""
  removeUserFromEvent(eventId: ID!, userId: ID!): TumiEvent
  updateCostItemsFromTemplate(eventId: ID!): TumiEvent
  updateESNcard(esnCardOverride: Boolean!, id: ID!): User
  updateEventGeneralInfo(data: UpdateEventInput!, id: ID!): TumiEvent!
  updateProfile(input: UpdateProfileInput!): User

  """Update an event template"""
  updateTemplate(data: UpdateTemplateInput!, id: ID!): EventTemplate
  updateTemplateFinances(finances: Json!, id: ID!): EventTemplate!
  updateTenant(data: updateTenantInput!, id: ID!): Tenant

  """Change the role of s user on the current tenant"""
  updateUserRole(role: Role!, userId: ID!): User!

  """Change the status of s user on the current tenant"""
  updateUserStatus(status: MembershipStatus!, userId: ID!): User!
  useMoveOrder(id: ID!): paymentIntent!

  """
  Send a verification email to a user (to the current user if no id is provided)
  """
  verifyEmail(userId: ID): User!
}

"""Input to create a new Event Organizer"""
input NewOrganizerInput {
  link: String
  name: String!
  text: String!
}

type PhotoShare {
  createdAt: DateTime!
  event: TumiEvent!
  eventId: String!
  id: ID!
}

type Product {
  availability: [MembershipStatus!]!
  createdAt: DateTime!
  description: String!
  icon: String!
  id: ID!
  prices: [ProductPrice!]!
  tenant: Tenant!
  tenantId: String!
  title: String!
}

type ProductPrice {
  amount: Decimal!
  availability: [MembershipStatus!]!
  createdAt: DateTime!
  id: ID!
  product: Product!
  productId: String!
}

enum PublicationState {
  APPROVAL
  DRAFT
  ORGANIZERS
  PUBLIC
}

type Query {
  costItem(id: ID!): CostItem!
  costItemsForEvent(eventId: ID!): [CostItem!]!
  currentTenant: Tenant

  """Returns the logged in user if found or null"""
  currentUser: User

  """Get one event by ID"""
  event(eventId: ID!): TumiEvent

  """Get one event template by ID"""
  eventTemplate(id: ID!): EventTemplate

  """Query event templates for the current tenant"""
  eventTemplates: [EventTemplate!]!

  """Get a list of all events"""
  events(after: DateTime): [TumiEvent!]!
  getPaymentSetupSession: paymentSetupSession!
  logs: [ActivityLog!]!
  moveOrder(id: ID!): EventRegistrationMoveOrder
  moveOrders: [EventRegistrationMoveOrder!]!

  """Retrieve a list of all event organizers"""
  organizers: [EventOrganizer!]!
  products: [Product!]!
  refundedRegistrations: [RefundedRegistration!]!
  registration(id: ID!): EventRegistration!
  registrations: [EventRegistration!]!
  tenants: [Tenant!]!
  userById(
    """ID of the user"""
    id: ID!
  ): User

  """Get all users with a status from the allowList"""
  userWithStatus(allowList: [MembershipStatus!]!): [User!]!

  """returns a list of users"""
  users(roleList: [Role] = [USER, ADMIN], statusList: [MembershipStatus] = [NONE, TRIAL, FULL, SPONSOR, ALUMNI]): [User!]!
}

type Receipt {
  amount: Decimal!
  blob: String!
  container: String!
  costItem: CostItem!
  costItemId: String!
  createdAt: DateTime!
  id: ID!
  md5: String
  preview: String
  type: String
  url: String!
  user: User!
  userId: String!
}

type RefundedRegistration {
  chargeId: String!
  createdAt: DateTime!
  event: TumiEvent
  eventId: String!
  id: ID!
  refundId: String!
  user: User!
  userId: String!
}

enum RegistrationMode {
  EXTERNAL
  ONLINE
  STRIPE
}

enum RegistrationType {
  CALENDAR
  ORGANIZER
  PARTICIPANT
}

enum Role {
  ADMIN
  USER
}

type StripeUserData {
  customerId: String!
  id: ID!
  paymentMethodId: String
}

enum SubmissionItemType {
  DATE
  FILE
  LONGTEXT
  NUMBER
  RATING
  TEXT
}

enum SubmissionTime {
  AFTER
  BEFORE
  DURING
  REGISTRATION
}

"""One Tenant of the app, most likely an ESN section"""
type Tenant {
  aboutPage: String!
  createdAt: DateTime!
  faqPage: String
  id: ID!
  imprintPage: String!
  name: String!
  privacyPolicyPage: String!
  shortName: String!
  statistics: statistics!
}

"""Actual instande of an TumiEventbased on a template"""
type TumiEvent {
  amountCollected: Int
  coordinates: Json
  costItems(hideOnInvoice: Boolean = false): [CostItem!]!

  """Indicates whether the user could be an organizer for this event"""
  couldBeOrganizer: Boolean!

  """Indicates whether the user could be a participant for this event"""
  couldBeParticipant: Boolean!
  createdAt: DateTime!
  createdBy: User!
  description: String!
  discountedPrice: Decimal
  end: DateTime!
  esnDiscount: Boolean!
  eventOrganizerId: String!
  eventTemplate: EventTemplate!
  eventTemplateId: String!
  feesPaid: Int
  icon: String!
  id: ID!
  location: String!
  netAmountCollected: Int
  organizer: EventOrganizer!
  organizerLimit: Int!

  """
  Indicates whether the current user can register to this event as Organizer
  """
  organizerRegistrationPossible: Boolean!
  organizerRegistrations: [EventRegistration!]!
  organizerSignup: [MembershipStatus!]!
  organizerText: String!

  """Organizers alraedy on this event"""
  organizers: [User!]!

  """Number of users registered as organizer to this event"""
  organizersRegistered: Int!
  participantLimit: Int!
  participantMail: String!

  """
  Indicates whether the current user can register to this event as participant
  """
  participantRegistrationPossible: Json!
  participantRegistrations: [EventRegistration!]!
  participantSignup: [MembershipStatus!]!
  participantText: String!

  """Number of users registered as participant to this event"""
  participantsRegistered: Int!
  photoShare: PhotoShare
  price: Decimal
  publicationState: PublicationState!
  registration: EventRegistration
  registrationLink: String
  registrationMode: RegistrationMode!
  start: DateTime!
  submissionItems: [EventSubmissionItem!]!
  title: String!

  """Indicates if the current user is organizer for the event"""
  userIsOrganizer: Boolean!

  """Indicates if the current user is registered for the event"""
  userRegistered: Boolean!
}

"""Additional inputs to create an event from a template"""
input UpdateEventInput {
  description: String!
  discountedPrice: Decimal
  end: DateTime!
  esnDiscount: Boolean!
  eventOrganizerId: ID
  icon: String!
  organizerLimit: Int!
  organizerSignup: [MembershipStatus!]!
  organizerText: String!
  participantLimit: Int!
  participantSignup: [MembershipStatus!]!
  participantText: String!
  price: Decimal
  registrationLink: String
  registrationMode: RegistrationMode!
  start: DateTime!
  title: String!
}

"""Profile update input object"""
input UpdateProfileInput {
  firstName: String!
  lastName: String!
  phone: String
}

"""Input to update an event template"""
input UpdateTemplateInput {
  comment: String!
  description: String!
  duration: Decimal!
  icon: String!
  organizerText: String!
  participantMail: String!
  participantText: String!
  title: String!
}

"""One User of the app"""
type User {
  """Id from auth0 for this user"""
  authId: String!
  birthdate: DateTime!
  calendarToken: String!
  createdAt: DateTime!
  currentTenant(userId: ID): UsersOfTenants
  email: String!
  email_verified: Boolean!
  esnCardOverride: Boolean!
  eventRegistrations: [EventRegistration!]!
  firstName: String!

  """Concatenated name of the user"""
  fullName: String!
  hasESNcard: Boolean!
  iban: String
  id: ID!
  lastName: String!

  """List of events organized by the user"""
  organizedEvents: [TumiEvent!]!

  """List of events attended by the user"""
  participatedEvents: [TumiEvent!]!
  paypal: String
  phone: String
  picture: String!
}

type UsersOfTenants {
  createdAt: DateTime!
  role: Role!
  status: MembershipStatus!
  stripeData: StripeUserData
  tenant: Tenant!
  tenantId: String!
  user: User!
  userId: String!
}

type lineChartSeriesItem {
  name: String!
  value: Int!
}

input newProductInput {
  availability: [MembershipStatus!]!
  description: String!
  icon: String!
  title: String!
}

type paymentIntent {
  client_secret: String
  id: String!
  status: String!
}

type paymentSetupSession {
  id: String!
}

type statistics {
  refundHistory: [Json!]!
  registeredUsers: Int!
  registrationHistory: [Json!]!
  registrations: Int!
  userHistory: [Json!]!
}

input updateTenantInput {
  aboutPage: String!
  faqPage: String
  imprintPage: String!
  privacyPolicyPage: String!
}

type userHistoryItem {
  name: String!
  series: [lineChartSeriesItem!]!
}
