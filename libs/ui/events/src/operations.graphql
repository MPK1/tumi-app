query loadEvent($id: ID!) {
  currentUser{
    hasESNcard
  }
  event(eventId: $id) {
    id
    title
    icon
    start
    end
    publicationState
    description
    organizerText
    participantText
    registrationMode
    registrationLink
    price
    discountedPrice
    esnDiscount
    #    createdBy {
    #      id
    #      fullName
    #    }
    submissionItems{
      id
      name
      submissionTime
      instruction
      required
      type
    }
    organizer {
      id
      link
      text
    }
    registration {
      id
      didAttend
      openMoveOrders{
        id
      }
      user{
        id
        fullName
      }
    }
    organizerSignup
    participantSignup
    organizerRegistrationPossible
    participantRegistrationPossible
    userRegistered
    userIsOrganizer
    participantLimit
    participantsRegistered
    couldBeOrganizer
    couldBeParticipant
    organizers {
      id
      fullName
    }
  }
}

mutation createMoveOrder($eventId: ID!){
  createRegistrationMoveOrder(id: $eventId){
    id
    openMoveOrders{
      id
    }
  }
}

query getMoveOrder($orderId: ID!){
  moveOrder(id: $orderId){
    id
    registration{
      id
      event{
        title
        price
      }
    }
  }
}

query loadEventForRunning($id: ID!) {
  event(eventId: $id) {
    id
    title
    icon
    start
    end
    organizerRegistrations {
      id
      checkInTime
      user {
        id
        fullName
        phone
        picture
        email
      }
    }
    costItems(hideOnInvoice: true){
      id
      amount
      actualAmount
      submittedAmount
      name
      receipts{
        id
      }
    }
    participantRegistrations {
      id
      checkInTime
      paymentStatus
      user {
        id
        fullName
        phone
        picture
        email
      }
    }
  }
}

query getCostItem($id: ID!){
costItem(id: $id){
  id
  name
  amount
  submittedAmount
  event{
    id
    title
  }
  receipts{
    id
    amount
    url
    user{
      id
      fullName
    }
  }
}
}

mutation getBlobToken{
  blobUploadKey
}

mutation addReceipt($costItemId: ID!, $receiptInput: CreateReceiptInput!){
  addReceiptToCostItem(costItemId: $costItemId,receiptInput: $receiptInput){
    id
    receipts{
      id
      amount
      url
    }
  }
}

mutation deleteReceipt($costItemId: ID!, $receiptId: ID!){
  deleteReceipt(costItemId: $costItemId, receiptId: $receiptId){
    id
    receipts{
      id
    }
  }
}

query getRegistration($id: ID!) {
  registration(id: $id) {
    id
    paymentStatus
    type
    didAttend
    event {
      id
      title
      icon
    }
    user {
      id
      fullName
      picture
    }
  }
}

mutation checkInUser($id: ID!, $manual: Boolean) {
  checkInUser(id: $id, manualCheckin: $manual) {
    id
    checkInTime
    didAttend
  }
}

query loadEventForManagement($id: ID!) {
  event(eventId: $id) {
    id
    title
    icon
    start
    #financial
    amountCollected
    netAmountCollected
    feesPaid
    #registrations
    organizerRegistrations {
      id
      createdAt
      paymentStatus
      user {
        id
        fullName
        picture
        email
      }
    }
    participantRegistrations {
      id
      createdAt
      paymentStatus
      paymentIntentId
      netPaid
      checkInTime
      submissions{
        id
        data
        submissionItem{
          id
          name
        }
      }
      user {
        id
        fullName
        picture
        email
      }
    }
  }
}

query GetUserPaymentStatus {
  currentUser {
    currentTenant {
      stripeData {
        paymentMethodId
      }
    }
  }
}

mutation registerWithStripePayment($eventId: ID!, $submissions: Json) {
  registerWithStripe(id: $eventId, submissions: $submissions) {
    id
    status
    client_secret
  }
}

mutation deregisterWithRefund($eventId: ID!, $userId: ID) {
  deregisterUserWithRefund(userId: $userId, eventId: $eventId) {
    id
    participantRegistrationPossible
    userRegistered
    participantLimit
    participantsRegistered
    couldBeParticipant
  }
}

mutation deregisterFromEvent($eventId: ID!, $userId: ID) {
  deregisterFromEvent(id: $eventId, userId: $userId) {
    id
    participantRegistrations {
      id
    }
    participantsRegistered
    userRegistered
  }
}

mutation removeUserFromEvent($eventId: ID!, $userId: ID!) {
  removeUserFromEvent(eventId: $eventId, userId: $userId) {
    id
    organizers {
      id
      fullName
      picture
    }
  }
}

mutation addOrganizerToEvent($eventId: ID!, $userId: ID!) {
  addOrganizerToEvent(eventId: $eventId, userId: $userId) {
    id
    organizers {
      fullName
      picture
      id
    }
  }
}

mutation updateEvent($id: ID!, $data: UpdateEventInput!) {
  updateEventGeneralInfo(id: $id, data: $data) {
    title
    icon
    start
    end
    description
    organizerText
    participantText
    registrationMode
    registrationLink
    price
    discountedPrice
    esnDiscount
    eventOrganizerId
    organizerSignup
    participantSignup
    participantLimit
    organizerLimit
  }
}

mutation updatePublication($id: ID!, $state: PublicationState!) {
  changeEventPublication(id: $id, state: $state) {
    id
    publicationState
  }
}

query loadUsersByStatus($allowList: [MembershipStatus!]!) {
  userWithStatus(allowList: $allowList) {
    id
    fullName
  }
}

mutation registerForEvent($eventId: ID!, $type: RegistrationType) {
  registerForEvent(eventId: $eventId, registrationType: $type) {
    id
    organizerRegistrationPossible
    participantRegistrationPossible
    organizersRegistered
    participantsRegistered
    couldBeOrganizer
    userRegistered
    organizers {
      fullName
    }
  }
}

query eventList($after: DateTime) {
  events(after: $after) {
    id
    title
    icon
    start
    participantLimit
    participantsRegistered
    organizerLimit
    organizersRegistered
    couldBeOrganizer
    couldBeParticipant
    publicationState
    registrationMode
    userRegistered
    userIsOrganizer
  }
}
