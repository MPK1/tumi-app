// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../lib/client"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./dbml"
}

enum Role {
  USER
  TRIAL
  MEMBER
  ALUMNI
  ADMIN
}

enum PublicationState {
  DRAFT
  APPROVAL
  PUBLIC
}

enum SubmissionItemType {
  FILE
  NUMBER
  TEXT
  DATE
  RATING
}

enum SubmissionTime {
  REGISTRATION
  BEFORE
  DURING
  AFTER
}

model Tenant {
  id        String           @id @default(uuid()) @db.Uuid
  createdAt DateTime         @default(now())
  users     UsersOfTenants[]
  name      String
  events    Event[]
}

model User {
  id                 String              @id @default(uuid()) @db.Uuid
  createdAt          DateTime            @default(now())
  tenants            UsersOfTenants[]
  eventSubmissions   EventSubmission[]
  eventRegistrations EventRegistration[]
  Receipt            Receipt[]
}

model UsersOfTenants {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String   @db.Uuid
  role      Role     @default(USER)

  @@id([userId, tenantId])
}

model EventTemplate {
  id              String   @id @default(uuid()) @db.Uuid
  createdAt       DateTime @default(now())
  name            String
  description     String
  location        String
  duration        Int
  participantText String
  participantMail String
  runningText     String
  finances        Json
  Event           Event[]
}

model Event {
  id               String                @id @default(uuid()) @db.Uuid
  createdAt        DateTime              @default(now())
  tenant           Tenant                @relation(fields: [tenantId], references: [id])
  tenantId         String                @db.Uuid
  title            String
  icon             String
  teaser           String
  publicationState PublicationState      @default(DRAFT)
  submissionItems  EventSubmissionItem[]
  registrations    EventRegistration[]
  eventTemplate    EventTemplate         @relation(fields: [eventTemplateId], references: [id])
  eventTemplateId  String                @db.Uuid
  Receipt          Receipt[]
  CostItem         CostItem[]
  PhotoShare       PhotoShare[]
}

model CostItem {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   String    @db.Uuid
  name      String
  ammount   Int
  Receipt   Receipt[]
}

model Receipt {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.Uuid
  costItem      CostItem @relation(fields: [costItemId], references: [id])
  costItemId    String   @db.Uuid
  covered       Boolean  @default(false)
  amount        Int
  date          DateTime
  amountCovered Int
  Event         Event?   @relation(fields: [eventId], references: [id])
  eventId       String?  @db.Uuid
}

model PhotoShare {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @db.Uuid
}

model EventRegistration {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @db.Uuid
}

model EventSubmissionItem {
  id             String            @id @default(uuid()) @db.Uuid
  createdAt      DateTime          @default(now())
  event          Event             @relation(fields: [eventId], references: [id])
  eventId        String            @db.Uuid
  required       Boolean
  submissionTime SubmissionTime
  submissions    EventSubmission[]
}

model EventSubmission {
  id               String              @id @default(uuid()) @db.Uuid
  createdAt        DateTime            @default(now())
  user             User                @relation(fields: [userId], references: [id])
  userId           String              @db.Uuid
  submissionItem   EventSubmissionItem @relation(fields: [submissionItemId], references: [id])
  submissionItemId String              @db.Uuid
}
